from pydantic import BaseModel, Field
from typing import List, Optional

class AudioInfo(BaseModel):
    id: str = Field(..., description="audio id")
    title: Optional[str] = Field(None, description="music title")
    image_url: Optional[str] = Field(None, description="music cover image")
    lyric: Optional[str] = Field(None, description="music lyric")
    audio_url: Optional[str] = Field(None, description="music download url")
    video_url: Optional[str] = Field(None, description="Music video download link, can be used to share")
    created_at: str = Field(..., description="Create time")
    model_name: str = Field(..., description="suno model name, chirp-v3")
    status: str = Field(..., description="The generated states include submitted, queue, streaming, complete.")
    gpt_description_prompt: Optional[str] = Field(None, description="Simple mode on user input prompt, Suno will generate formal prompts, lyrics, etc.")
    prompt: Optional[str] = Field(None, description="The final prompt for executing the generation task, customized by the user in custom mode, automatically generated by Suno in simple mode.")
    type: Optional[str] = Field(None, description="Type")
    tags: Optional[str] = Field(None, description="Music genre. User-provided in custom mode, automatically generated by Suno in simple mode.")

class GenerateRequest(BaseModel):
    prompt: str = Field(..., description="Prompt", example="A popular heavy metal song about war, sung by a deep-voiced male singer, slowly and melodiously. The lyrics depict the sorrow of people after the war.")
    make_instrumental: bool = Field(False, description="Whether to generate instrumental music")
    wait_audio: bool = Field(False, description="Whether to wait for music generation, default is false, directly return audio task information; set to true, will wait for up to 100s until the audio is generated.")

class CustomGenerateRequest(BaseModel):
    prompt: str = Field(..., description="Detailed prompt, including information such as music lyrics.", example="[Verse 1]\nCruel flames of war engulf this land\nBattlefields filled with death and dread\nInnocent souls in darkness, they rest\nMy heart trembles in this silent test\n\n[Verse 2]\nPeople weep for loved ones lost\nBattered bodies bear the cost\nSeeking peace and hope once known\nOur grief transforms to hearts of stone\n\n[Chorus]\nSilent battlegrounds, no birds' song\nShadows of war, where we don't belong\nMay flowers of peace bloom in this place\nLet's guard this precious dream with grace\n\n[Bridge]\nThrough the ashes, we will rise\nHand in hand, towards peaceful skies\nNo more sorrow, no more pain\nTogether, we'll break these chains\n\n[Chorus]\nSilent battlegrounds, no birds' song\nShadows of war, where we don't belong\nMay flowers of peace bloom in this place\nLet's guard this precious dream with grace\n\n[Outro]\nIn unity, our strength will grow\nA brighter future, we'll soon know\nFrom the ruins, hope will spring\nA new dawn, we'll together bring")
    tags: str = Field(..., description="Music genre", example="pop metal male melancholic")
    title: str = Field(..., description="Music title", example="Silent Battlefield")
    make_instrumental: bool = Field(False, description="Whether to generate instrumental music")
    wait_audio: bool = Field(False, description="Whether to wait for music generation, default is false, directly return audio task information; set to true, will wait for up to 100s until the audio is generated.")

class GenerateLyricsRequest(BaseModel):
    prompt: str = Field(..., description="Prompt", example="A soothing lullaby")

class ExtendAudioRequest(BaseModel):
    audio_id: str = Field(..., description="The ID of the audio clip to extend.", example="e76498dc-6ab4-4a10-a19f-8a095790e28d")
    prompt: str = Field("", description="Detailed prompt, including information such as music lyrics.")
    continue_at: str = Field("0", description="Extend a new clip from a song at mm:ss(e.g. 00:30). Default extends from the end of the song.", example="109.96")
    tags: str = Field("", description="Music genre")
    title: str = Field("", description="Music title")

class ConcatAudioRequest(BaseModel):
    clip_id: str = Field(..., description="The ID of the audio clip to concatenate.")

class GenerateResponse(BaseModel):
    data: List[AudioInfo]

class GenerateLyricsResponse(BaseModel):
    data: str

class GetMusicResponse(BaseModel):
    data: List[AudioInfo]

class GetLimitResponse(BaseModel):
    data: dict

class ExtendAudioResponse(BaseModel):
    data: AudioInfo

class ConcatAudioResponse(BaseModel):
    data: AudioInfo

class GetClipResponse(BaseModel):
    data: dict
